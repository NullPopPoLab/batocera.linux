#!/bin/bash

SYSTEM=$1
ACTION=$2
shift
shift

## Wine detection
GAMENAME=$1 
ROMGAMENAME=$(basename "${GAMENAME}")
WINE_RUNNER="$(/usr/bin/batocera-settings-get windows.wine-runner)"
[[ -z "$WINE_RUNNER" ]] && WINE_RUNNER="wine-tkg"

if test -z "${WINE_VERSION}"
then
	WINE_VERSION="proton"
fi

if [[ "${WINE_VERSION}" == "lutris" || "${WINE_VERSION}" == "proton" ]]; then
    WINE_VERSION="wine-tkg"
fi
echo "*** Chosen WINE runner is ${WINE_VERSION} ***"

find_wine_dir() {
    local WINE_VERSION="$1"
    # check if we're using a custom wine runner
    if [[ "$WINE_VERSION" != "wine-tkg" ]]; then
        # now check if the folder exists
        if [[ -e "/userdata/system/wine/custom/${WINE_VERSION}" ]]; then
            echo "/userdata/system/wine/custom"
        else
            WINE_VERSION="wine-tkg"
            if [[ -e "/usr/wine/${WINE_VERSION}" ]]; then
                echo "/usr/wine"
            else
                return 1
            fi
        fi
    elif [[ -e "/usr/wine/${WINE_VERSION}" ]]; then
        echo "/usr/wine"
    else
        return 1
    fi
}

update_wine_version() {
    local WINE_VERSION="$1"
    if [[ "$WINE_VERSION" != "wine-tkg" ]]; then
        if [[ -e "/userdata/system/wine/custom/${WINE_VERSION}" ]]; then
            echo "$WINE_VERSION"
        else
            WINE_VERSION="wine-tkg"
            echo "$WINE_VERSION"
        fi
    else
        echo "$WINE_VERSION"
    fi
}

## Wine executables
DIR="$(find_wine_dir "$WINE_VERSION")"
if [[ $? -eq 0 ]]; then
    WINE_VERSION="$(update_wine_version "$WINE_VERSION")"
else
    echo "can't find WINE version ${WINE_VERSION} directory, you should change the runner"
    exit 1
fi

echo "*** Directory checks complete, WINE runner is ${WINE_VERSION} ***"

USER_DIR="/userdata/system/wine"
WINE="${DIR}/${WINE_VERSION}/bin/wine"
WINE64="${DIR}/${WINE_VERSION}/bin/wine64"
WINESERVER="${DIR}/${WINE_VERSION}/bin/wineserver"
MSIEXEC="${DIR}/${WINE_VERSION}/bin/msiexec"
WINETRICKS="${DIR}/winetricks"

## Folders
WINE_BOTTLE_DIR="/userdata/system/wine-bottles/${SYSTEM}"
G_ROMS_DIR="/userdata/roms/${SYSTEM}"
# Check lib64 directory
if [[ -e "${DIR}/${WINE_VERSION}/lib64/wine" ]]; then
    WINE_LIB64_DIR="${DIR}/${WINE_VERSION}/lib64/wine"
else
    WINE_LIB64_DIR="${DIR}/${WINE_VERSION}/lib/wine"
fi
# Check lib32 directory
if [[ -e "${DIR}/${WINE_VERSION}/lib32/wine" ]]; then
    WINE_LIB32_DIR="${DIR}/${WINE_VERSION}/lib32/wine"
else
    WINE_LIB32_DIR="${DIR}/${WINE_VERSION}/lib/wine"
fi

## Export Wine libs
PATH=$PATH:PATH=$PATH:${DIR}/${WINE_VERSION}/bin
export LD_LIBRARY_PATH="/lib32:${WINE_LIB32_DIR}/i386-unix:/lib:/usr/lib:${WINE_LIB64_DIR}/x86_64-unix"
export GST_PLUGIN_SYSTEM_PATH_1_0="/usr/lib/gstreamer-1.0:/lib32/gstreamer-1.0"
export GST_REGISTRY_1_0="/userdata/system/.cache/gstreamer-1.0/registry.x86_64.bin:/userdata/system/.cache/gstreamer-1.0/registry..bin"
export LIBGL_DRIVERS_PATH="/lib32/dri:/usr/lib/dri"
export WINEDLLPATH="${WINE_LIB32_DIR}/i386-windows:${WINE_LIB64_DIR}/x86_64-windows"
# hum pw 0.2 and 0.3 are hardcoded, not nice
export SPA_PLUGIN_DIR="/usr/lib/spa-0.2:/lib32/spa-0.2"
export PIPEWIRE_MODULE_DIR="/usr/lib/pipewire-0.3:/lib32/pipewire-0.3"

GAMESPECIFICDRIVE=""
ROOTDRIVE=""
GAMEISOMOUNT=""
GAMEISODRIVE=""

gameext() {
    echo "${1}" | sed -e s+"^.*\.\([^\.]*\)$"+"\1"+ | tr A-Z a-z
}

cleanAndExit() {
    RESNEW=$(batocera-resolution currentMode)
    if [[ "${RESNEW}" != "${G_RESCUR}" ]]; then
        batocera-resolution setMode "${G_RESCUR}"
    fi

    if [[ -e "${GST_REGISTRY_1_0}" ]]; then
        rm -f "${GST_REGISTRY_1_0}"
    fi
	unmount_game
	unmount_root
 	unmount_iso

    exit "${1}"
    # TODO : unmount always, trap, later
}

# winepoint by type
BASEGAMENAME=$(basename "${GAMENAME}")
GAMEEXT=$(gameext "${GAMENAME}")

if [[ ${ACTION} = "install" ]]; then
	case "${GAMEEXT}" in
		"exe")
		WINEPOINT=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}" | sed -e s+"\.exe$"++)".wine"
		;;
		"msi")
		WINEPOINT=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}" | sed -e s+"\.msi$"++)".wine"
		;;
		"iso")
		WINEPOINT=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}" | sed -e s+"\.iso$"++)".wine"
		;;
		*)
		echo "unsupported extension ${GAMEEXT}" >&2
		cleanAndExit 1
	esac
	GAMEDIR=${GAMENAME}
else
	case "${GAMEEXT}" in
		"wine")
		WINEPOINT="${GAMENAME}"
		GAMEDIR=${WINEPOINT}
		;;
		"pc")
		WINEPOINT="${WINE_BOTTLE_DIR}/${WINE_VERSION}/${BASEGAMENAME}.wine"
		GAMEDIR=${GAMENAME}
		;;
		"exe")
		WINEPOINT="${WINE_BOTTLE_DIR}/${WINE_VERSION}/${BASEGAMENAME}.wine"
		GAMEDIR=$(dirname "${GAMENAME}")
		;;
		"wtgz")
		WINEPOINT="${WINE_BOTTLE_DIR}/${WINE_VERSION}/${BASEGAMENAME}.wine"
		GAMEDIR=${WINEPOINT}
		if [[ ! -e "${WINEPOINT}" ]]; then
			mkdir -p "${WINEPOINT}" || return 1
			(cd "${WINEPOINT}" && gunzip -c "${GAMENAME}" | tar xf -) || return 1
		fi
		;;
		"wsquashfs")
		WINEPOINT="${WINE_BOTTLE_DIR}/${WINE_VERSION}/${BASEGAMENAME}.wine"
#		WINEPOINT="/var/run/wine/${BASEGAMENAME}"
		GAMEDIR=${WINEPOINT}
		SQUASHFSPOINT="/var/run/wine/squashfs_${BASEGAMENAME}"
		SAVEPOINT="${WINE_BOTTLE_DIR}/${BASEGAMENAME}"
		WORKPOINT="${WINE_BOTTLE_DIR}/${BASEGAMENAME}.work"

		# Attempt to unmount any existing mount points before starting
		[[ -d "${WINEPOINT}" ]] && safe_umount "${WINEPOINT}"
		[[ -d "${SQUASHFSPOINT}" ]] && safe_umount "${SQUASHFSPOINT}"

		# Remove directories if they exist
		[[ -d "${SQUASHFSPOINT}" ]] && rm -rf "${SQUASHFSPOINT}"
		[[ -d "${WORKPOINT}" ]] && rm -rf "${WORKPOINT}"
		[[ -d "${WINEPOINT}" ]] && rm -rf "${WINEPOINT}"

		# Create necessary fresh directories
		mkdir -p "${SAVEPOINT}" || return 1
		mkdir -p "${WORKPOINT}" || return 1
		mkdir -p "${WINEPOINT}" || return 1
		mkdir -p "${SQUASHFSPOINT}" || return 1

		# Mount squashfs
		if ! mount "${GAMENAME}" "${SQUASHFSPOINT}"; then
		    [[ -d "${SQUASHFSPOINT}" ]] && rm -rf "${SQUASHFSPOINT}"
		    [[ -d "${WORKPOINT}" ]] && rm -rf "${WORKPOINT}"
		    [[ -d "${WINEPOINT}" ]] && rm -rf "${WINEPOINT}"
		    return 1
		fi

		# Mount overlay
		if ! mount -t overlay -o rw,lowerdir="${SQUASHFSPOINT}",upperdir="${SAVEPOINT}",workdir="${WORKPOINT}",redirect_dir=on overlay "${WINEPOINT}"; then
		    safe_umount "${SQUASHFSPOINT}"
		    [[ -d "${SQUASHFSPOINT}" ]] && rm -rf "${SQUASHFSPOINT}"
		    [[ -d "${WORKPOINT}" ]] && rm -rf "${WORKPOINT}"
		    [[ -d "${WINEPOINT}" ]] && rm -rf "${WINEPOINT}"
		    return 1
		fi
		;;
		*)
		echo "unsupported extension ${GAMEEXT}" >&2
		cleanAndExit 1
	esac
fi

export WINEPREFIX=${WINEPOINT}
QUICKINSTALLDIR="${WINEPOINT}/quick_install"

# Bootup switch
if test -z ${BATOCERA_WINE_BOOTUP}
then
	BOOTUPCMD="${GAMEDIR}/boot/default.cmd"
else
	BOOTUPCMD="${GAMEDIR}/boot/${BATOCERA_WINE_BOOTUP}.cmd"
fi

if [ -f "${BOOTUPCMD}" ]; then
	echo "select to bootup: ${BOOTUPCMD}" >&2
    cp "${BOOTUPCMD}" "${GAMEDIR}/autorun.cmd"
fi

# options

getWine_var() {
    VARNAME=$1
    DEFVAL=$2

    if [[ -e "${GAMEDIR}/autorun.cmd" ]]; then
        VAL=$(cat "${GAMEDIR}/autorun.cmd" | dos2unix | grep "^${VARNAME}=" | sed -e s+"^${VARNAME}="+""+ | head -1)
        if [[ -n "${VAL}" ]]; then
            echo "${VAL}"
        else
            echo "${DEFVAL}"
        fi
    else
        echo "${DEFVAL}"
    fi
}

WINE_CMD=$(getWine_var "CMD" "explorer")
WINE_DIR=$(getWine_var "DIR" "")
WINE_LANG=$(getWine_var "LANG" "")
WINE_ENV=$(getWine_var "ENV" "")

ESYNC=$(getWine_var "ESYNC" "${ESYNC}")
FSYNC=$(getWine_var "FSYNC" "${FSYNC}")
PBA=$(getWine_var "PBA" "${PBA}")
FSR=$(getWine_var "FSR" "${FSR}")
FPS_LIMIT=$(getWine_var "FPS_LIMIT" "${FPS_LIMIT}")
ALLOW_XIM=$(getWine_var "ALLOW_XIM" "${ALLOW_XIM}")
NO_WRITE_WATCH=$(getWine_var "NO_WRITE_WATCH" "${NO_WRITE_WATCH}")
FORCE_LARGE_ADRESS=$(getWine_var "FORCE_LARGE_ADRESS" "${FORCE_LARGE_ADRESS}")
HEAP_DELAY_FREE=$(getWine_var "HEAP_DELAY_FREE" "${HEAP_DELAY_FREE}")
HIDE_NVIDIA_GPU=$(getWine_var "HIDE_NVIDIA_GPU" "${HIDE_NVIDIA_GPU}")
ENABLE_NVAPI=$(getWine_var "ENABLE_NVAPI" "${ENABLE_NVAPI}")
DXVK_RESET_CACHE=$(getWine_var "DXVK_RESET_CACHE" "${DXVK_RESET_CACHE}")
WINE_NTFS=$(getWine_var "WINE_NTFS" "${WINE_NTFS}")
WINE_DEBUG=$(getWine_var "WINE_DEBUG" "${WINE_DEBUG}")
VIRTUAL_DESKTOP=$(getWine_var "VIRTUAL_DESKTOP" "${VIRTUAL_DESKTOP}")
VIRTUAL_DESKTOP_SIZE=$(getWine_var "VIRTUAL_DESKTOP_SIZE" "${VIRTUAL_DESKTOP_SIZE}")
MF=$(getWine_var "MF" "${MF}")
DXVK=$(getWine_var "DXVK" "${DXVK}")
DXVK_HUD=$(getWine_var "DXVK_HUD" "${DXVK_HUD}")

SDL_GAMECONTROLLERCONFIG=$(getWine_var "SDL_GAMECONTROLLERCONFIG" "${SDL_GAMECONTROLLERCONFIG}")
SDL_JOYSTICK_HIDAPI=$(getWine_var "SDL_JOYSTICK_HIDAPI" "${SDL_JOYSTICK_HIDAPI}")


KEYBOARD="$(/usr/bin/batocera-settings-get system.kblayout)"

if test -z "${VIRTUAL_DESKTOP_SIZE}"
then
    VIRTUAL_DESKTOP_SIZE=`batocera-resolution currentResolution`
fi

if [[ "${VIRTUAL_DESKTOP}" = 1 ]]; then
    VDESKTOP="explorer /desktop=Wine,${VIRTUAL_DESKTOP_SIZE}"
fi

export SDL_GAMECONTROLLERCONFIG=1
[[ "${SDL_GAMECONTROLLERCONFIG}" = 0 ]] && SDL_GAMECONTROLLERCONFIG=0

export SDL_JOYSTICK_HIDAPI=1
[[ "${SDL_JOYSTICK_HIDAPI}" = 0 ]] && SDL_JOYSTICK_HIDAPI=0

export WINEESYNC=1
[[ "${ESYNC}" = 0 ]] && WINEESYNC=0

export WINEFSYNC=1
[[ "${FSYNC}" = 0 ]] && WINEFSYNC=0

export PBA_ENABLE=0
[[ "${PBA}" = 1 ]] && PBA_ENABLE=1

export DXVK_FRAME_RATE=0
[[ "${FPS_LIMIT}" = 1 ]] && DXVK_FRAME_RATE=60

export WINEDEBUG="-all"
[[ "${WINE_DEBUG}" = 1 ]] && WINEDEBUG="err+all,fixme+all"

export DXVK_LOG_LEVEL=none
[[ "${WINE_DEBUG}" = 1 ]] && unset DXVK_LOG_LEVEL

export VKD3D_DEBUG=none
[[ "${WINE_DEBUG}" = 1 ]] && unset VKD3D_DEBUG

export VKD3D_SHADER_DEBUG=none
[[ "${WINE_DEBUG}" = 1 ]] && unset VKD3D_SHADER_DEBUG

export VKD3D_SHADER_CACHE_PATH="/userdata/system/cache"

export WINE_FULLSCREEN_FSR=0
[[ "${FSR}" = 1 ]] && unset WINE_FULLSCREEN_FSR

# Wine-mono override for FNA games
export WINE_MONO_OVERRIDES="Microsoft.Xna.Framework.*,Gac=n"

# Disable XIM support until libx11 >= 1.7 is widespread
export WINE_ALLOW_XIM=0
[[ "${ALLOW_XIM}" = 1 ]] && WINE_ALLOW_XIM=1

# Advanced options from proton
export WINE_DISABLE_WRITE_WATCH=0
[[ "${NO_WRITE_WATCH}" = 1 ]] && WINE_DISABLE_WRITE_WATCH=1

export WINE_LARGE_ADDRESS_AWARE=0
[[ "${FORCE_LARGE_ADRESS}" = 1 ]] && WINE_LARGE_ADDRESS_AWARE=1

export WINE_HEAP_DELAY_FREE=0
[[ "${HEAP_DELAY_FREE}" = 1 ]] && WINE_HEAP_DELAY_FREE=1

export WINE_HIDE_NVIDIA_GPU=0
[[ "${HIDE_NVIDIA_GPU}" = 1 ]] && WINE_HIDE_NVIDIA_GPU=1

export NVAPI=0
[[ "${ENABLE_NVAPI}" = 1 ]] && NVAPI=1

export DXVK_STATE_CACHE=1
[[ "${DXVK_RESET_CACHE}" = 1 ]] && DXVK_STATE_CACHE=reset

export NTFS_MODE=0
[[ "${WINE_NTFS}" = 1 ]] && NTFS_MODE=1

export STAGING_SHARED_MEMORY=1
export ULIMIT_SIZE=1048576
export USE_BUILTIN_VKD3D=0

# Nvidia variables
if [[ -e "/userdata/system/cache" ]]; then
    export XDG_CACHE_HOME="/userdata/system/cache"
else
    mkdir -p "/userdata/system/cache"
    export XDG_CACHE_HOME="/userdata/system/cache"
fi
export __GL_SHADER_DISK_CACHE_SIZE=2147483648
export __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1
export __GL_SHADER_DISK_CACHE_PATH="${XDG_CACHE_HOME}"/nvidia

if ! ulimit -n "${ULIMIT_SIZE}" 2>/dev/null; then
    export WINEESYNC=0
fi

setxkbmap "${KEYBOARD}"


usage() {
    echo "${1} windows play    	     <game>.iso"               >&2
    echo "${1} windows play    	     <game>.exe"               >&2
    echo "${1} windows play    	     <game>.pc"                >&2
    echo "${1} windows play    	     <game>.wine"              >&2
    echo "${1} windows play    	     <game>.wsquashfs"         >&2
    echo "${1} windows play    	     <game>.wtgz"              >&2
    echo "${1} windows install 	     <game>.iso"               >&2
    echo "${1} windows install 	     <game>.msi"               >&2
    echo "${1} windows install 	     <game>.exe"               >&2
    echo "${1} windows tricks  	     <game>.wine <trick>"      >&2
    echo "${1} windows tricks  	     <game>.pc <trick>"        >&2
    echo "${1} windows tricks  	     <game>.exe <trick>"       >&2
    echo "${1} windows tricks  	     <game>.wtgz <trick>"      >&2
    echo "${1} windows tricks  	     <game>.wsquashfs <trick>" >&2
    echo "${1} windows wine2squashfs <game.wine>"              >&2
    echo "${1} windows wine2winetgz  <game.wine>"              >&2
}

waitWineServer() {
    while pgrep -f "${WINESERVER}"
    do
	echo "waiting wineserver" >&2
	sleep 1
    done
}

unmount_iso() {

	if test -n "${GAMEISODRIVE}"
	then
		echo "unlink ${GAMEISODRIVE}" >&2

		rm -f "${GAMEISODRIVE}"
		GAMEISODRIVE=""
	fi

	if test -n "${GAMEISOMOUNT}"
	then
		echo "unmount ${GAMEISOMOUNT}" >&2

		umount "${GAMEISOMOUNT}"
		rmdir "${GAMEISOMOUNT}"
		GAMEISOMOUNT=""
		echo "unmount_iso done" >&2
	fi
}

mount_iso() {

	unmount_iso

	DRIVE="$1"
	DISC="$2"
	if [ ! -f "${DISC}" ]
	then
		return 0
	fi

	echo "game disc: ${DISC}" >&2

	GAMEISOMOUNT="/var/run/wine/drive_${DRIVE}.cdrom"
	echo "mount point: ${GAMEISOMOUNT}" >&2

	mkdir -p "${GAMEISOMOUNT}" || return 1
	if ! mount -t iso9660 "${DISC}" "${GAMEISOMOUNT}"
	then
		if ! mount -t udf "${DISC}" "${GAMEISOMOUNT}"
		then
			echo "cannot mount: ${DISC}" >&2
			return 1
		fi
	fi

	GAMEISODRIVE="${WINEPOINT}/dosdevices/${DRIVE}:"
	echo "disc path: ${GAMEISODRIVE}" >&2
	ln -sf "${GAMEISOMOUNT}" "${GAMEISODRIVE}"
	echo "mount_iso done" >&2
}

unmount_game() {

	if test -n "${GAMESPECIFICDRIVE}"
	then
		echo "unlink ${GAMESPECIFICDRIVE}" >&2

		rm -f "${GAMESPECIFICDRIVE}"
		GAMESPECIFICDRIVE=""
		echo "unmount_game done" >&2
	fi
}

mount_game() {

	unmount_game

	DRIVE="$1"
	HOMEPOINT="$2"
	echo "game dir: ${HOMEPOINT}" >&2

	GAMESPECIFICDRIVE="${WINEPOINT}/dosdevices/${DRIVE}:"
	echo "game path: ${GAMESPECIFICDRIVE}" >&2
	ln -sf "${HOMEPOINT}" "${GAMESPECIFICDRIVE}"
	echo "mount_game done" >&2
}

unmount_root() {

	if test -z "${ROOTDRIVE}"
	then
		return
	fi

	if [ -L "${ROOTDRIVE}" ]
	then
		rm -f "${ROOTDRIVE}"
	fi
	ROOTDRIVE=""
}

mount_root() {

	DRIVE="$1"
	ENABLITY="$2"
	ROOTDRIVE="${WINEPOINT}/dosdevices/${DRIVE}:"

	if [ "${ENABLITY}" != "1" ]
	then
		unmount_root
	elif [ ! -L "${ROOTDRIVE}" ]
	then
		ln -sf / "${ROOTDRIVE}"
	fi
}

redist_install() {

    if [[ -e "${QUICKINSTALLDIR}" ]]; then

        for file in ${QUICKINSTALLDIR}/*.exe; do
            echo "Executing file $file"
                
            case "${file}" in

            "${QUICKINSTALLDIR}/DXSETUP.exe" | "${QUICKINSTALLDIR}/dxsetup.exe")
                "${WINE}" "${file}" /silent &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${QUICKINSTALLDIR}/vcredist_x64_2005.exe" | "${QUICKINSTALLDIR}/vcredist_x86_2005.exe")
                "${WINE}" "${file}" /q &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${QUICKINSTALLDIR}/vcredist_x64_2008.exe" | "${QUICKINSTALLDIR}/vcredist_x86_2008.exe")
                "${WINE}" "${file}" /q &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${QUICKINSTALLDIR}/vcredist_x64_2010.exe" | "${QUICKINSTALLDIR}/vcredist_x86_2010.exe")
                "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${QUICKINSTALLDIR}/vcredist_x64_2012.exe" | "${QUICKINSTALLDIR}/vcredist_x86_2012.exe")
                "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${QUICKINSTALLDIR}/vcredist_x64_2013.exe" | "${QUICKINSTALLDIR}/vcredist_x86_2013.exe")
                "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${QUICKINSTALLDIR}/vcredist_x64_2015.exe" | "${QUICKINSTALLDIR}/vcredist_x86_2015.exe")
                "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${QUICKINSTALLDIR}/vcredist_x64_2017.exe" | "${QUICKINSTALLDIR}/vcredist_x86_2017.exe")
                "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${QUICKINSTALLDIR}/vcredist_x64_2019.exe" | "${QUICKINSTALLDIR}/vcredist_x86_2019.exe")
                "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${QUICKINSTALLDIR}/vcredist_x64_2015_2019.exe" | "${QUICKINSTALLDIR}/vcredist_x86_2015_2019.exe")
                "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${QUICKINSTALLDIR}/vcredist_x64_2015_2022.exe" | "${QUICKINSTALLDIR}/vcredist_x86_2015_2022.exe")
                "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${QUICKINSTALLDIR}/oalinst.exe")
                "${WINE}" "${file}" /s &>/dev/null
                "${WINESERVER}" -w
                ;;

            *)
                "${WINE}" "${file}" &>/dev/null
                "${WINESERVER}" -w
                ;;
            esac

        mv -f "${file}" "${file}.done"
        done
    fi

    return 0
}

msi_install() {

    if [[ -e "${QUICKINSTALLDIR}" ]]; then

        for file in "${QUICKINSTALLDIR}/*.msi"; do
            echo "Executing file $file" >&2

			case "${file}" in

			"${QUICKINSTALLDIR}/*.msi")
			    echo "is wildcard (skiped)" >&2
				;;

			*)
				"${MSIEXEC}" -i "${file}" /quiet /qn /norestart &>/dev/null || return 1
				"${WINESERVER}" -w
				;;
			esac

			mv -f "${file}" "${file}.done"
        done
    fi

    return 0
}

reg_install() {

    if [[ -e "/var/run/rawinput.reg" ]]; then
        "${WINE}" regedit //?/unix/var/run/rawinput.reg &>/dev/null || return 1
        "${WINE64}" regedit //?/unix/var/run/rawinput.reg &>/dev/null || return 1
        rm /var/run/rawinput.reg
    fi

    if test -e "${QUICKINSTALLDIR}"; then

        for file in "${QUICKINSTALLDIR}/*.reg"; do
            echo "Importing registry $file" >&2

			case "${file}" in

			"${QUICKINSTALLDIR}/*.reg")
			    echo "is wildcard (skiped)" >&2
				;;

			*)
				"${WINE}" regedit //?/unix"${file}" &>/dev/null || return 1
				"${WINE64}" regedit //?/unix"${file}" &>/dev/null || return 1
				;;
			esac

			mv -f "${file}" "${file}.done"
        done
    fi

    return 0
}

fonts_install() {

    if test -e "${QUICKINSTALLDIR}"; then

        for file in "${QUICKINSTALLDIR}/{*.ttf,*.ttc}"; do
            echo "Installing fonts $file" >&2

			case "${file}" in

			"${QUICKINSTALLDIR}/{*.ttf,*.ttc}")
			    echo "is wildcard (skiped)" >&2
				;;

			*)
				cp -a "${file}" "${WINEPOINT}/drive_c/windows/Fonts" || return 1
				;;
			esac

			mv -f "${file}" "${file}.done"
        done
    fi

    return 0
}

dxvk_install() {
    export WINEDLLOVERRIDES="winemenubuilder.exe="

    # install dxvk only on system where it is available (aka, not x86)
    [[ -e "/usr/wine/dxvk" ]] || return 0

    if [[ "${DXVK_HUD}" = 1 ]]; then
	    export DXVK_HUD=1
    fi

    if [[ "${DXVK}" = 1 ]]; then
        mkdir -p "${WINEPOINT}/drive_c/windows/system32" "${WINEPOINT}/drive_c/windows/syswow64" || return 1
        if [[ -e "/userdata/system/wine/dxvk" ]]; then
            echo "Creating links using /userdata, Linux File System required !!!" >&2
            ln -sf "/userdata/system/wine/dxvk/x64/"{d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll,nvapi64.dll} "${WINEPOINT}/drive_c/windows/system32" || return 1
            ln -sf "/userdata/system/wine/dxvk/x32/"{d3d8.dll,d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll,nvapi.dll} "${WINEPOINT}/drive_c/windows/syswow64" || return 1
        else
            echo "Creating links using /usr/wine/dxvk/, Linux File System required !!!" >&2
            ln -sf "/usr/wine/dxvk/x64/"{d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll,nvapi64.dll} "${WINEPOINT}/drive_c/windows/system32" || return 1
            ln -sf "/usr/wine/dxvk/x32/"{d3d8.dll,d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll,nvapi.dll} "${WINEPOINT}/drive_c/windows/syswow64" || return 1
        fi
    else
        mkdir -p "${WINEPOINT}/drive_c/windows/system32" "${WINEPOINT}/drive_c/windows/syswow64" || return 1
        echo "Creating links using ${DIR}/${WINE_VERSION}, Linux File System required !!!" >&2
        ln -sf "${WINE_LIB64_DIR}/x86_64-windows/"{d3d8.dll,d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll} "${WINEPOINT}/drive_c/windows/system32" || return 1
        ln -sf "${WINE_LIB32_DIR}/i386-windows/"{d3d8.dll,d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll} "${WINEPOINT}/drive_c/windows/syswow64" || return 1
    fi

    if [[ "${DXVK}" = 1 ]]; then
        export DXVK_ASYNC=1
        export DXVK_CONFIG_FILE="/userdata/system/wine/dxvk.conf"
        export WINEDLLOVERRIDES="${WINEDLLOVERRIDES};dxgi,d3d8,d3d9,d3d10core,d3d11,d3d12,d3d12core=n"
        export DXVK_STATE_CACHE_PATH="/userdata/system/cache"
    else
        export DXVK_ASYNC=0
        export WINEDLLOVERRIDES="${WINEDLLOVERRIDES};dxgi,d3d8,d3d9,d3d10core,d3d11,d3d12,d3d12core=b"
    fi

    if [[ "${NVAPI}" = 1 ]]; then
        export DXVK_ENABLE_NVAPI=1
        export WINEDLLOVERRIDES="${WINEDLLOVERRIDES};nvapi,nvapi64=n"
    else
        export DXVK_ENABLE_NVAPI=0
        export WINEDLLOVERRIDES="${WINEDLLOVERRIDES};nvapi64,nvapi="
    fi

    return 0
}

install_winetricks() {

    if [[ -e "${WINETRICKS}" ]]; then
        echo "Winetricks is already installed"
	else
        echo "Winetricks is downloading"
        wget -O "${WINETRICKS}" "https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks" &>/dev/null
        chmod +x "${WINETRICKS}"
        echo "Winetricks is now installed"
	fi
}

trick_wine() {

    TRICK=$1
	echo "** Do trick ${TRICK} to "${WINEPREFIX}" **"

    DISPLAY=:0.0 "${WINETRICKS}" "${TRICK}"
}

tricks_install() {

TRICKSFILE="${QUICKINSTALLDIR}/tricks.txt"
TRICKSLOG="${QUICKINSTALLDIR}/tricks.txt.done"

    if [ -f "${TRICKSFILE}" ]; then
		install_winetricks
        echo "tricks file: ${TRICKSFILE}" >&2
        echo "tricks log: ${TRICKSLOG}" >&2
		mount_root z "1"
        export DISPLAY=:0.0
        while read line; do
            line=`echo "${line}" | xargs`
            echo "bgn trick: $line" >&2
			trick_wine "${line}"
            echo "end trick: $line" >&2
            echo "${line}" >> "${TRICKSLOG}"
		unmount_root
        done < "${TRICKSFILE}"
        rm "${TRICKSFILE}"
    fi
}

sandboxing_prefix() {

    if [[ -d "${WINEPOINT}/drive_c/users/steamuser" ]]; then
        USERNAME=steamuser
    fi

    if [[ -d "${WINEPOINT}/drive_c/users/root" ]]; then
        USERNAME=root
    fi

    echo "Remove Symblink"
    # replace some links by folders. 
    # don't create all folders in case links doesn't exist to not create both Music and My Music at the same time (old wine uses My Music, new wine uses Musics)
    local DIR=""

    for DIR in "Downloads" "Documents" "My Documents" "Music" "My Music" "Pictures" "My Pictures" "Videos" "My Videos" "Templates"
    do
        if [[ -L "${WINEPOINT}/drive_c/users/${USERNAME}/${DIR}" ]]; then
            unlink "${WINEPOINT}/drive_c/users/${USERNAME}/${DIR}" || return 1
            mkdir -p "${WINEPOINT}/drive_c/users/${USERNAME}/${DIR}" || return 1
        fi
    done

    return 0
}

createWineDirectory() {

    # already created
    [[ -e "${WINEPOINT}" ]] && return 0

    # please wait screen
    bsod-wine&
    BSODPID=$!

    mkdir -p "${WINEPOINT}" || return 1

    # Workaround wine bottle creation issue with debug enabled
    export WINEDLLOVERRIDES="winegstreamer="

    if ! "${WINE}" hostname; then
	    rm -rf "${WINEPOINT}"
	    kill -15 "${BSODPID}"
        echo "+++ Failed initialising ${WINEPOINT} +++"
	    return 1
    fi

    kill -15 "${BSODPID}"

    return 0
}

play_wine() {
    echo "play_wine"

    redist_install || return 1
    msi_install || return 1
    reg_install || return 1
    fonts_install || return 1
    dxvk_install || return 1
    tricks_install || return 1

	mount_iso d "${GAMEDIR}/disc01.iso"
	mount_root z "${BATOCERA_WINE_USE_ROOTDRIVE}"

    if [[ -n "${WINE_LANG}" ]]; then
        (cd "${WINEPOINT}/${WINE_DIR}" && LC_ALL=${WINE_LANG} eval "${WINE_ENV}" "${WINE} ${VDESKTOP} ${WINE_CMD}")
    else
        (cd "${WINEPOINT}/${WINE_DIR}" && eval "${WINE_ENV}" "${WINE} ${VDESKTOP} ${WINE_CMD}")
    fi
    waitWineServer
	unmount_iso
}

play_pc() {
    echo "play_pc"

    createWineDirectory || return 1
    redist_install || return 1
    msi_install || return 1
    reg_install || return 1
    fonts_install || return 1
    sandboxing_prefix || return 1
    dxvk_install || return 1
    tricks_install || return 1

	mount_iso d "${GAMEDIR}/disc01.iso"
	mount_root z "${BATOCERA_WINE_USE_ROOTDRIVE}"
	mount_game y "${G_ROMS_DIR}/${BASEGAMENAME}"

    env
    if [[ -n "${WINE_LANG}" ]]; then
        (cd "${GAMENAME}/${WINE_DIR}" && LC_ALL=${WINE_LANG} eval "${WINE_ENV}" "${WINE} ${VDESKTOP} ${WINE_CMD}")
    else
        (cd "${GAMENAME}/${WINE_DIR}" && eval "${WINE_ENV}" "${WINE} ${VDESKTOP} ${WINE_CMD}")
    fi
    waitWineServer
	unmount_game
	unmount_iso
}

#play_iso() {
#    # TODO
#}

play_exe() {
    GAMEEXE=$(basename "${GAMENAME}")

    createWineDirectory || return 1
    redist_install || return 1
    msi_install || return 1
    reg_install || return 1
    fonts_install || return 1
    sandboxing_prefix || return 1
    dxvk_install || return 1
    tricks_install || return 1

	mount_iso d "${GAMEDIR}/disc01.iso"
	mount_root z "${BATOCERA_WINE_USE_ROOTDRIVE}"
	mount_game y "${GAMEDIR}/${BASEGAMENAME}"

    (cd "${GAMEDIR}" && "${WINE}" "${GAMEEXE}")
    waitWineServer
	unmount_game
	unmount_iso
}

play_winetgz() {
    echo "play_winetgz"

    redist_install || return 1
    msi_install || return 1
    reg_install || return 1
    fonts_install || return 1
    dxvk_install || return 1
    tricks_install || return 1

	mount_iso d "${GAMEDIR}/disc01.iso"
	mount_root z "${BATOCERA_WINE_USE_ROOTDRIVE}"

    if [[ -n "${WINE_LANG}" ]]; then
        (cd "${WINEPOINT}/${WINE_DIR}" && LC_ALL=${WINE_LANG} eval "${WINE_ENV}" "${WINE} ${VDESKTOP} ${WINE_CMD}")
    else
        (cd "${WINEPOINT}/${WINE_DIR}" && eval "${WINE_ENV}" "${WINE} ${VDESKTOP} ${WINE_CMD}")
    fi
    waitWineServer
	unmount_iso
}

# Function to safely unmount a mount point with multiple attempts
safe_umount() {
    local mount_point="$1"
    local attempts=3

    for ((i=1; i<=attempts; i++)); do
        # Try lazy unmount first
        umount -l "${mount_point}" && return 0
        # If lazy unmount fails, try force unmount
        umount -f "${mount_point}" && return 0
        # If that fails, try recursive force unmount
        umount -f -R "${mount_point}" && return 0
        sleep 1
    done

    # If all attempts fail, we return an error
    echo "Error: Failed to unmount ${mount_point} after ${attempts} attempts" >&2
    return 1
}

play_squashfs() {
    echo "play_squashfs"

    reg_install || return 1
    fonts_install || return 1
    dxvk_install || return 1
    tricks_install || return 1

	mount_iso d "${GAMEDIR}/disc01.iso"
	mount_root z "${BATOCERA_WINE_USE_ROOTDRIVE}"

    if [[ -n "${WINE_LANG}" ]]; then
        (cd "${WINEPOINT}/${WINE_DIR}" && LC_ALL=${WINE_LANG} eval "${WINE_ENV}" "${WINE} ${VDESKTOP} ${WINE_CMD}")
    else
        (cd "${WINEPOINT}/${WINE_DIR}" && eval "${WINE_ENV}" "${WINE} ${VDESKTOP} ${WINE_CMD}")
    fi

    waitWineServer
	unmount_iso

    # Safely unmount and clean up
    safe_umount "${WINEPOINT}" || return 1
    safe_umount "${SQUASHFSPOINT}" || return 1

    # Remove directories if they exist
    [[ -d "${SQUASHFSPOINT}" ]] && rm -rf "${SQUASHFSPOINT}"
    [[ -d "${WORKPOINT}" ]] && rm -rf "${WORKPOINT}"
    [[ -d "${WINEPOINT}" ]] && rm -rf "${WINEPOINT}"

    return 0
}

init_cmd() {

    (
	echo "#DIR=drive_c/Program Files/myprogram"
	echo "#CMD=start.exe"
    ) > "${WINEPOINT}/autorun.cmd"
}

basename_no_dup() {
    CANDIDATE=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}" | sed -e s+"\.exe$"++)".wine"
    i=0
    while [ -d "${CANDIDATE}" ]; do
        i=$((i+1))
        BASEGAMENAME=$(basename "${GAMENAME}")"_${i}"
        # Keep the extension, easier to troubleshoot when you have multiple setup.exe
        CANDIDATE=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}")".wine"
    done
    echo "${BASEGAMENAME}"
}

install_exe() {
    BASEGAMENAME=$(basename_no_dup "${GAMENAME}")
    INSTALLERFILE="${BASEGAMENAME}"

    createWineDirectory

	mount_root z "1"

    (cd "${GAMEDIR}" && "${WINE}" "${INSTALLERFILE}")
    waitWineServer
    init_cmd
}

install_msi() {
    BASEGAMENAME=$(basename_no_dup "${GAMENAME}")
    INSTALLERFILE="${BASEGAMENAME}"

    createWineDirectory

	mount_root z "1"

    (cd "${GAMEDIR}" && "${MSIEXEC}" /i "${INSTALLERFILE}")
    waitWineServer
    init_cmd
}

install_iso() {
    BASEGAMENAME=$(basename_no_dup "${GAMENAME}")
    GAMEISOMOUNT="/var/run/wine/${BASEGAMENAME}.cdrom"
    INSTALLERISO="${GAMENAME}"

    mkdir -p "${GAMEISOMOUNT}" || return 1
    if ! mount -t iso9660 "${INSTALLERISO}" "${GAMEISOMOUNT}"; then
        if ! mount -t udf "${INSTALLERISO}" "${GAMEISOMOUNT}"; then
            rmdir "${GAMEISOMOUNT}"
            return 1
        fi
    fi

    createWineDirectory
 
	mount_iso d "${INSTALLERISO}"
	mount_root z "1"

    if mkdir -p "${WINEPOINT}/dosdevices" && rm -f "${WINEPOINT}/dosdevices/d:" && ln -sf "${GAMEISOMOUNT}" "${WINEPOINT}/dosdevices/d:"; then
	    "${WINE}" explorer "d:"
	    rm -f "${WINEPOINT}/dosdevices/d:"
    fi

    waitWineServer
    init_cmd

    # try to clean the cdrom
    safe_umount "${GAMEISOMOUNT}"
   [[ -d "${GAMEISOMOUNT}" ]] && rm -rf "${GAMEISOMOUNT}"

 	unmount_iso
}

wine2squashfs() {
    SQUASHFSFILE=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}.wsquashfs" | sed -e s+"\.wine\.squashfs$"+".wsquashfs"+)
    
    mksquashfs "${GAMEDIR}" "${SQUASHFSFILE}" -comp zstd || return 1
    return 0
}

wine2winetgz() {
    WINETGZFILE="${G_ROMS_DIR}/${BASEGAMENAME}.wtgz"

    (cd "${GAMEDIR}" && tar cf - * | gzip -c > "${WINETGZFILE}") || return 1
    return 0
}

G_RESCUR=$(batocera-resolution currentMode)

case "${ACTION}" in
    "play")
	case "${GAMEEXT}" in
	    "wine")
		play_wine || cleanAndExit 1
		;;
	    "pc")
		play_pc || cleanAndExit 1
		;;
	    "exe")
		play_exe || cleanAndExit 1
		;;
#	    "iso")
#		play_iso || cleanAndExit 1
#		;;
	    "wsquashfs")
		play_squashfs || cleanAndExit 1
		;;
	    "wtgz")
		play_winetgz || cleanAndExit 1
		;;
	    *)
		echo "unknown extension ${GAMEEXT}" >&2
		cleanAndExit 1
	esac
	;;
    "install")
	case "${GAMEEXT}" in
	    "exe")
		install_exe || cleanAndExit 1
		;;
	    "msi")
		install_msi || cleanAndExit 1
		;;
	    "iso")
		install_iso || cleanAndExit 1
		;;
	    *)
		echo "unknown extension ${GAMEEXT}" >&2
		cleanAndExit 1
	esac
	;;
    "tricks")
	TRICK=$2
	install_winetricks
	mount_root z "1"
	trick_wine "${TRICK}" || cleanAndExit 1
	;;
    "wine2squashfs")
	wine2squashfs || exit 1
	;;
    "wine2winetgz")
	wine2winetgz || exit 1
	;;
    *)
	set +x
	echo "unknown action ${ACTION}" >&2
	usage "${0}"
	cleanAndExit 1
esac

cleanAndExit 0
