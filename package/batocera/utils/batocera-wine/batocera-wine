#!/bin/bash

SYSTEM=$1
ACTION=$2
shift
shift

## Wine detection
GAMENAME=$1
BASEGAMENAME=$(basename "${GAMENAME}")

if test -z "${WINE_VERSION}"
then
	WINE_VERSION="proton"
fi

if [ "${BATOCERA_WINE_SAVES_EACH_CORE}" = "1" ]
then
	WINE_PROFILE=${WINE_VERSION}
else
	WINE_PROFILE="wine"
fi

# Wine Folder
wine_folder() {
if test -e "/userdata/system/wine/proton" || test -e "/userdata/system/wine/lutris"; then
    echo "/userdata/system/wine"
    else
    echo "/usr/wine"
fi
}

## Wine executables
DIR="$(wine_folder)"
USER_DIR="/userdata/system/wine"
WINE="${DIR}/${WINE_VERSION}/bin/wine"
WINE64="${DIR}/${WINE_VERSION}/bin/wine64"
WINESERVER="${DIR}/${WINE_VERSION}/bin/wineserver"
MSIEXEC="${DIR}/${WINE_VERSION}/bin/msiexec"
WINETRICKS="${DIR}/winetricks"
MF_INSTALL="${DIR}/mf/mf-install.sh"

## Folders
WINE_BOTTLE_DIR="/userdata/system/wine-bottles/${SYSTEM}"
G_ROMS_DIR="/userdata/roms/${SYSTEM}"


## Export Wine libs
PATH=$PATH:PATH=$PATH:${DIR}/${WINE_VERSION}/bin
export LD_LIBRARY_PATH="/lib32:${DIR}/${WINE_VERSION}/lib/wine/i386-unix:/lib:/usr/lib:${DIR}/${WINE_VERSION}/lib/wine/x86_64-unix"
export GST_PLUGIN_SYSTEM_PATH_1_0="/usr/lib/gstreamer-1.0:/lib32/gstreamer-1.0"
export GST_REGISTRY_1_0="/userdata/system/.cache/gstreamer-1.0/registry.x86_64.bin"
export LIBGL_DRIVERS_PATH="/lib32/dri:/usr/lib/dri"
export WINEDLLPATH="${DIR}/${WINE_VERSION}/lib/wine/i386-windows:${DIR}/${WINE_VERSION}/lib/wine/x86_64-windows"
# hum pw 0.2 and 0.3 are hardcoded, not nice
export SPA_PLUGIN_DIR="/usr/lib/spa-0.2:/lib32/spa-0.2"
export PIPEWIRE_MODULE_DIR="/usr/lib/pipewire-0.3:/lib32/pipewire-0.3"

GAMESPECIFICDRIVE=""
ROOTDRIVE=""
GAMEISOMOUNT=""
GAMEISODRIVE=""
MOUNTDIR=""
BSODPID=""

G_RESCUR=$(batocera-resolution currentMode)

gameext() {
    echo "${1}" | sed -e s+"^.*\.\([^\.]*\)$"+"\1"+ | tr A-Z a-z
}
gameunext() {
    echo "${1}" | sed -e s+"^\(.*\)\.[^\.]*$"+"\1"+
}

GAMEEXT=$(gameext "${GAMENAME}")

unmount_iso() {

	if test -n "${GAMEISODRIVE}"
	then
		echo "unlink ${GAMEISODRIVE}" >&2

		rm -f "${GAMEISODRIVE}"
		GAMEISODRIVE=""
	fi

	if test -n "${GAMEISOMOUNT}"
	then
		echo "unmount ${GAMEISOMOUNT}" >&2

		umount "${GAMEISOMOUNT}"
		rmdir "${GAMEISOMOUNT}"
		GAMEISOMOUNT=""
		echo "unmount_iso done" >&2
	fi
}

mount_iso() {

	unmount_iso

	DRIVE="$1"
	DISC="$2"
	if [ ! -f "${DISC}" ]
	then
		return 0
	fi

	echo "game disc: ${DISC}" >&2

	GAMEISOMOUNT="/var/run/wine/drive_${DRIVE}.cdrom"
	echo "mount point: ${GAMEISOMOUNT}" >&2

	mkdir -p "${GAMEISOMOUNT}" || return 1
	if ! mount -t iso9660 "${DISC}" "${GAMEISOMOUNT}"
	then
		if ! mount -t udf "${DISC}" "${GAMEISOMOUNT}"
		then
			echo "cannot mount: ${DISC}" >&2
			return 1
		fi
	fi

	GAMEISODRIVE="${WINEPOINT}/dosdevices/${DRIVE}:"
	echo "disc path: ${GAMEISODRIVE}" >&2
	ln -sf "${GAMEISOMOUNT}" "${GAMEISODRIVE}"
	echo "mount_iso done" >&2
}

unmount_game() {

	if test -n "${GAMESPECIFICDRIVE}"
	then
		echo "unlink ${GAMESPECIFICDRIVE}" >&2

		rm -f "${GAMESPECIFICDRIVE}"
		GAMESPECIFICDRIVE=""
		echo "unmount_game done" >&2
	fi
}

mount_game() {

	unmount_game

	DRIVE="$1"
	HOMEPOINT="$2"
	echo "game dir: ${HOMEPOINT}" >&2

	GAMESPECIFICDRIVE="${WINEPOINT}/dosdevices/${DRIVE}:"
	echo "game path: ${GAMESPECIFICDRIVE}" >&2
	ln -sf "${HOMEPOINT}" "${GAMESPECIFICDRIVE}"
	echo "mount_game done" >&2
}

unmount_root() {

	if test -z "${ROOTDRIVE}"
	then
		return
	fi

	if [ -L "${ROOTDRIVE}" ]
	then
		rm -f "${ROOTDRIVE}"
	fi
	ROOTDRIVE=""
}

mount_root() {

	DRIVE="$1"
	ENABLITY="$2"
	ROOTDRIVE="${WINEPOINT}/dosdevices/${DRIVE}:"

	if [ "${ENABLITY}" != "1" ]
	then
		unmount_root
	elif [ ! -L "${ROOTDRIVE}" ]
	then
		ln -sf / "${ROOTDRIVE}"
	fi
}

endBSOD() {

	if test -z "${BSODPID}"
	then
		return
	fi

	kill -15 "${BSODPID}"
	BSODPID=""
}

bgnBSOD() {

	MSG="$1"

	endBSOD

	if test -z "${MSG}"
	then
		bsod-wine &
	else
		bsod-wine "${MSG}" &
	fi

	BSODPID=$!
}

waitWineServer() {
    while pgrep "${WINESERVER}"
    do
	echo "waiting wineserver" >&2
	sleep 1
    done
}

cleanAndExit() {

    endBSOD

    RESNEW=$(batocera-resolution currentMode)
    if [[ "${RESNEW}" != "${G_RESCUR}" ]]; then
        batocera-resolution setMode "${G_RESCUR}"
    fi

    if [[ -e "${GST_REGISTRY_1_0}" ]]; then
        rm -f "${GST_REGISTRY_1_0}"
    fi
	unmount_game
	unmount_root
 	unmount_iso

	case "${GAMEEXT}" in
		"wsquashfs")
	    # wait 1 sec before unmounting
	    sleep 1

	    # try to clean the cdrom
	    umount -f -R "${WINEPOINT}"
	    umount -f -R "${SQUASHFSPOINT}"
	    sleep 1
	    rm -rf "${SQUASHFSPOINT}"
	    rm -rf "${SQUASHWORKPOINT}"
	    rm -rf "${WINEPOINT}"
		;;
	esac

    exit "${1}"
    # TODO : unmount always, trap, later
}

# winepoint by type
if [[ ${ACTION} = "install" ]]; then
	case "${GAMEEXT}" in
		"exe")
		WINEPOINT=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}" | sed -e s+"\.exe$"++)".wine"
		;;
		"msi")
		WINEPOINT=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}" | sed -e s+"\.msi$"++)".wine"
		;;
		"iso")
		WINEPOINT=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}" | sed -e s+"\.iso$"++)".wine"
		;;
		*)
		echo "unsupported extension ${GAMEEXT}" >&2
		cleanAndExit 1
	esac
	GAMEDIR=${GAMENAME}
else
	case "${GAMEEXT}" in
		"wine")
		WINEPOINT="${GAMENAME}"
		GAMEDIR=${WINEPOINT}
		;;
		"pc")
		WINEPOINT="${WINE_BOTTLE_DIR}/${WINE_VERSION}/${BASEGAMENAME}.wine"
		GAMEDIR=${GAMENAME}
		MOUNTDIR="${GAMEDIR}"
		;;
		"exe")
		WINEPOINT="${WINE_BOTTLE_DIR}/${WINE_VERSION}/${BASEGAMENAME}.wine"
		GAMEDIR=$(dirname "${GAMENAME}")
		MOUNTDIR="${GAMEDIR}"
		;;
		"iso")
		WINEPOINT="${WINE_BOTTLE_DIR}/${WINE_VERSION}/${BASEGAMENAME}.wine"
		GAMEDIR=${WINEPOINT}
		;;
		"wtgz")
		WINEPOINT="${WINE_BOTTLE_DIR}/${WINE_VERSION}/${BASEGAMENAME}.wine"
		GAMEDIR=${WINEPOINT}
		;;
		"wsquashfs")
		WINEPOINT="${WINE_BOTTLE_DIR}/${WINE_VERSION}/${BASEGAMENAME}.wine"
		GAMEDIR=${WINEPOINT}
		;;
		*)
		echo "unsupported extension ${GAMEEXT}" >&2
		cleanAndExit 1
	esac
fi

export WINEPREFIX=${WINEPOINT}
QUICKINSTALLDIR="${WINEPOINT}/quick_install"
QUICKINSTALLSRC="${GAMEDIR}/quick_install"

# Reincarnation
if [ -d "${WINEPOINT}" ] && [ "${BATOCERA_WINE_REINCARNATION}" = 1 ]; then
	rm -rf "${WINEPOINT}"
fi

createWineDirectory() {

    # already created
    [[ -e "${WINEPOINT}" ]] && return 0

    # please wait screen
    bgnBSOD

    mkdir -p "${WINEPOINT}" || return 1

    if ! "${WINE}" hostname; then
	    rm -rf "${WINEPOINT}"
	    endBSOD
        echo "+++ Failed initialising ${WINEPOINT} +++"
	    return 1
    fi

    if [[ "${QUICKINSTALLDIR}" != "${QUICKINSTALLSRC}" ]] && [[ -d "${QUICKINSTALLSRC}" ]]; then
        cp -r "${QUICKINSTALLSRC}" "${QUICKINSTALLDIR}"
    fi

    endBSOD

    return 0
}

# Setup WINEPOINT
case "${GAMEEXT}" in
	"wtgz")
	if [[ ! -e "${WINEPOINT}" ]]; then
		mkdir -p "${WINEPOINT}" || return 1

		# please wait screen
		bgnBSOD "now extracting: ${GAMENAME}"

		(cd "${WINEPOINT}" && gunzip -c "${GAMENAME}" | tar xf -) || return 1

		endBSOD
	fi
	;;
	"wsquashfs")
	SQUASHFSPOINT="${WINE_BOTTLE_DIR}/${WINE_VERSION}/${BASEGAMENAME}.sfsp"
	SQUASHSAVEPOINT="${WINE_BOTTLE_DIR}/${WINE_VERSION}/${BASEGAMENAME}"
	SQUASHWORKPOINT="${WINE_BOTTLE_DIR}/${WINE_VERSION}/${BASEGAMENAME}.work"

	# Attempt to unmount any existing mount points before starting
	[[ -d "${WINEPOINT}" ]] && safe_umount "${WINEPOINT}"
	[[ -d "${SQUASHFSPOINT}" ]] && safe_umount "${SQUASHFSPOINT}"

	# Remove directories if they exist
	[[ -d "${SQUASHFSPOINT}" ]] && rm -rf "${SQUASHFSPOINT}"
	[[ -d "${SQUASHWORKPOINT}" ]] && rm -rf "${SQUASHWORKPOINT}"
	[[ -d "${WINEPOINT}" ]] && rm -rf "${WINEPOINT}"

	# Create necessary fresh directories
	mkdir -p "${SQUASHSAVEPOINT}" || return 1
	mkdir -p "${SQUASHWORKPOINT}" || return 1
	mkdir -p "${WINEPOINT}" || return 1
	mkdir -p "${SQUASHFSPOINT}" || return 1

	# Mount squashfs
	if ! mount "${GAMENAME}" "${SQUASHFSPOINT}"; then
	    [[ -d "${SQUASHFSPOINT}" ]] && rm -rf "${SQUASHFSPOINT}"
	    [[ -d "${SQUASHWORKPOINT}" ]] && rm -rf "${SQUASHWORKPOINT}"
	    [[ -d "${WINEPOINT}" ]] && rm -rf "${WINEPOINT}"
	    return 1
	fi

	# Mount overlay
	if ! mount -t overlay -o rw,lowerdir="${SQUASHFSPOINT}",upperdir="${SQUASHSAVEPOINT}",workdir="${SQUASHWORKPOINT}",redirect_dir=on overlay "${WINEPOINT}"; then
	    safe_umount "${SQUASHFSPOINT}"
	    [[ -d "${SQUASHFSPOINT}" ]] && rm -rf "${SQUASHFSPOINT}"
	    [[ -d "${SQUASHWORKPOINT}" ]] && rm -rf "${SQUASHWORKPOINT}"
	    [[ -d "${WINEPOINT}" ]] && rm -rf "${WINEPOINT}"
	    return 1
	fi
	;;
	*)
	if [ ! -d "${WINEPOINT}" ]; then
		createWineDirectory || return 1
	fi
esac

# Bootup switch
if test -z ${BATOCERA_WINE_BOOTUP}
then
	BOOTUPCMD="${GAMEDIR}/boot/default.cmd"
else
	BOOTUPCMD="${GAMEDIR}/boot/${BATOCERA_WINE_BOOTUP}.cmd"
fi

if [ "${BATOCERA_WINE_MAINTENANCE}" = 1 ]; then
	echo "*** MAINTENANCE MODE ***" >&2
elif [ -f "${BOOTUPCMD}" ]; then
	echo "select to bootup: ${BOOTUPCMD}" >&2
    cp "${BOOTUPCMD}" "${GAMEDIR}/autorun.cmd"
fi

# options

getWine_var() {
    VARNAME=$1
    DEFVAL=$2
    FORCEVAL=$3

    if [[ -n "${FORCEVAL}" ]]; then
        echo "${FORCEVAL}"
    elif [ "${BATOCERA_WINE_MAINTENANCE}" = 1 ]; then
        echo "${DEFVAL}"
    elif [[ -e "${GAMEDIR}/autorun.cmd" ]]; then
        VAL=$(cat "${GAMEDIR}/autorun.cmd" | dos2unix | grep "^${VARNAME}=" | sed -e s+"^${VARNAME}="+""+ | head -1)
        if [[ -n "${VAL}" ]]; then
            echo "${VAL}"
        else
            echo "${DEFVAL}"
        fi
    else
        echo "${DEFVAL}"
    fi
}

WINE_CMD=$(getWine_var "CMD" "explorer" "")
WINE_DIR=$(getWine_var "DIR" "" "")
WINE_LANG=$(getWine_var "LANG" "" "")
WINE_ENV=$(getWine_var "ENV" "" "")

ESYNC=$(getWine_var "ESYNC" "" "${ESYNC}")
FSYNC=$(getWine_var "FSYNC" "" "${FSYNC}")
PBA=$(getWine_var "PBA" "" "${PBA}")
FSR=$(getWine_var "FSR" "" "${FSR}")
FPS_LIMIT=$(getWine_var "FPS_LIMIT" "" "${FPS_LIMIT}")
ALLOW_XIM=$(getWine_var "ALLOW_XIM" "" "${ALLOW_XIM}")
NO_WRITE_WATCH=$(getWine_var "NO_WRITE_WATCH" "" "${NO_WRITE_WATCH}")
FORCE_LARGE_ADRESS=$(getWine_var "FORCE_LARGE_ADRESS" "" "${FORCE_LARGE_ADRESS}")
HEAP_DELAY_FREE=$(getWine_var "HEAP_DELAY_FREE" "" "${HEAP_DELAY_FREE}")
HIDE_NVIDIA_GPU=$(getWine_var "HIDE_NVIDIA_GPU" "" "${HIDE_NVIDIA_GPU}")
ENABLE_NVAPI=$(getWine_var "ENABLE_NVAPI" "" "${ENABLE_NVAPI}")
DXVK_RESET_CACHE=$(getWine_var "DXVK_RESET_CACHE" "" "${DXVK_RESET_CACHE}")
WINE_NTFS=$(getWine_var "WINE_NTFS" "" "${WINE_NTFS}")
WINE_DEBUG=$(getWine_var "WINE_DEBUG" "" "${WINE_DEBUG}")
VIRTUAL_DESKTOP=$(getWine_var "VIRTUAL_DESKTOP" "" "${VIRTUAL_DESKTOP}")
MF=$(getWine_var "MF" "" "${MF}")
DXVK=$(getWine_var "DXVK" "" "${DXVK}")
DXVK_HUD=$(getWine_var "DXVK_HUD" "" "${DXVK_HUD}")

KEYBOARD="$(/usr/bin/batocera-settings-get system.kblayout)"

if [[ "${VIRTUAL_DESKTOP}" = 1 ]]; then
    VIRTUAL_DESKTOP_SIZE=`batocera-resolution currentResolution`
    VDESKTOP="explorer /desktop=Wine,${VIRTUAL_DESKTOP_SIZE}"
fi

USE_GAMEPAD=$(getWine_var "USE_GAMEPAD" "0" "${USE_GAMEPAD}")
SDL_CONFIG=$(getWine_var "SDL_CONFIG" "0" "${SDL_CONFIG}")
if [[ "${USE_GAMEPAD}" == "0" ]]; then
	export SDL_GAMECONTROLLERCONFIG=$(echo "${SDL_GAMECONTROLLERCONFIG}" | sed -n 's/^\([^,]*,[^,]*,platform:[^,]*\).*$/\1/p')
elif [[ "${SDL_CONFIG}" == "0" ]]; then
	export SDL_GAMECONTROLLERCONFIG=""
fi

export WINEESYNC=1
[[ "${ESYNC}" = 0 ]] && WINEESYNC=0

export WINEFSYNC=1
[[ "${FSYNC}" = 0 ]] && WINEFSYNC=0

export PBA_ENABLE=0
[[ "${PBA}" = 1 ]] && PBA_ENABLE=1

export DXVK_FRAME_RATE=0
[[ "${FPS_LIMIT}" = 1 ]] && DXVK_FRAME_RATE=60

export WINEDEBUG="-all"
[[ "${WINE_DEBUG}" = 1 ]] && WINEDEBUG="err+all,fixme+all"

export DXVK_LOG_LEVEL=none
[[ "${WINE_DEBUG}" = 1 ]] && unset DXVK_LOG_LEVEL

export VKD3D_DEBUG=none
[[ "${WINE_DEBUG}" = 1 ]] && unset VKD3D_DEBUG

export VKD3D_SHADER_DEBUG=none
[[ "${WINE_DEBUG}" = 1 ]] && unset VKD3D_SHADER_DEBUG

export WINE_FULLSCREEN_FSR=0
[[ "${FSR}" = 1 ]] && unset WINE_FULLSCREEN_FSR

# Wine-mono override for FNA games
export WINE_MONO_OVERRIDES="Microsoft.Xna.Framework.*,Gac=n"

# Disable XIM support until libx11 >= 1.7 is widespread
export WINE_ALLOW_XIM=0
[[ "${ALLOW_XIM}" = 1 ]] && WINE_ALLOW_XIM=1

# Advanced options from proton
export WINE_DISABLE_WRITE_WATCH=0
[[ "${NO_WRITE_WATCH}" = 1 ]] && WINE_DISABLE_WRITE_WATCH=1

export WINE_LARGE_ADDRESS_AWARE=0
[[ "${FORCE_LARGE_ADRESS}" = 1 ]] && WINE_LARGE_ADDRESS_AWARE=1

export WINE_HEAP_DELAY_FREE=0
[[ "${HEAP_DELAY_FREE}" = 1 ]] && WINE_HEAP_DELAY_FREE=1

export WINE_HIDE_NVIDIA_GPU=0
[[ "${HIDE_NVIDIA_GPU}" = 1 ]] && WINE_HIDE_NVIDIA_GPU=1

export NVAPI=0
[[ "${ENABLE_NVAPI}" = 1 ]] && NVAPI=1

export DXVK_STATE_CACHE=1
[[ "${DXVK_RESET_CACHE}" = 1 ]] && DXVK_STATE_CACHE=reset

export NTFS_MODE=0
[[ "${WINE_NTFS}" = 1 ]] && NTFS_MODE=1

export STAGING_SHARED_MEMORY=1
export ULIMIT_SIZE=1048576
export USE_BUILTIN_VKD3D=0

# Nvidia variables
if test -e "/userdata/system/.cache"; then
    export XDG_CACHE_HOME="/userdata/system/.cache"
else
    mkdir -p "/userdata/system/.cache"
    export XDG_CACHE_HOME="/userdata/system/.cache"
fi
export __GL_SHADER_DISK_CACHE_SIZE=2147483648
export __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1
export __GL_SHADER_DISK_CACHE_PATH="${XDG_CACHE_HOME}"/nvidia

if ! ulimit -n "${ULIMIT_SIZE}" 2>/dev/null; then
    export WINEESYNC=0
fi

setxkbmap "${KEYBOARD}"


usage() {
    echo "${1} windows play    	     <game>.iso"               >&2
    echo "${1} windows play    	     <game>.exe"               >&2
    echo "${1} windows play    	     <game>.pc"                >&2
    echo "${1} windows play    	     <game>.wine"              >&2
    echo "${1} windows play    	     <game>.wsquashfs"         >&2
    echo "${1} windows play    	     <game>.wtgz"              >&2
    echo "${1} windows install 	     <game>.iso"               >&2
    echo "${1} windows install 	     <game>.msi"               >&2
    echo "${1} windows install 	     <game>.exe"               >&2
    echo "${1} windows tricks  	     <game>.wine <trick>"      >&2
    echo "${1} windows tricks  	     <game>.pc <trick>"        >&2
    echo "${1} windows tricks  	     <game>.exe <trick>"       >&2
    echo "${1} windows tricks  	     <game>.wtgz <trick>"      >&2
    echo "${1} windows tricks  	     <game>.wsquashfs <trick>" >&2
    echo "${1} windows wine2squashfs <game>.wine"              >&2
    echo "${1} windows wine2squashfs <game>.exe"               >&2
    echo "${1} windows wine2squashfs <game>.pc"                >&2
    echo "${1} windows wine2winetgz  <game>.wine"              >&2
    echo "${1} windows wine2winetgz  <game>.exe"               >&2
    echo "${1} windows wine2winetgz  <game>.pc"                >&2
}

mf_install() {

    if test "${MF}" = 1
    then
        if test -e "/userdata/system/wine/mf"
        then
            chmod +x "${MF_INSTALL}" || return 1
            "${MF_INSTALL}" || return 1
            /usr/bin/batocera-settings-set "${SYSTEM}[\"${BASEGAMENAME}\"].mf" 0
        else
            "${MF_INSTALL}" || return 1
            /usr/bin/batocera-settings-set "${SYSTEM}[\"${BASEGAMENAME}\"].mf" 0
        fi
    fi

    return 0
}

redist_install() {

	file=$1
	echo "Executing file ${file}"

	# please wait screen
	bgnBSOD "now installing: ${file}"
	    
	case "${file}" in
	
	"DXSETUP.exe" | "dxsetup.exe")
	    "${WINE}" "${QUICKINSTALLDIR}/${file}" /silent &>/dev/null || echo "cannot install ${file}"
	    "${WINESERVER}" -w
	    ;;
	
	"vcredist_x64_2005.exe" | "vcredist_x86_2005.exe")
	    "${WINE}" "${QUICKINSTALLDIR}/${file}" /q &>/dev/null || echo "cannot install ${file}"
	    "${WINESERVER}" -w
	    ;;
	
	"vcredist_x64_2008.exe" | "vcredist_x86_2008.exe")
	    "${WINE}" "${QUICKINSTALLDIR}/${file}" /q &>/dev/null || echo "cannot install ${file}"
	    "${WINESERVER}" -w
	    ;;
	
	"vcredist_x64_2010.exe" | "vcredist_x86_2010.exe")
	    "${WINE}" "${QUICKINSTALLDIR}/${file}" /quiet /qn /norestart &>/dev/null || echo "cannot install ${file}"
	    "${WINESERVER}" -w
	    ;;
	
	"vcredist_x64_2012.exe" | "vcredist_x86_2012.exe")
	    "${WINE}" "${QUICKINSTALLDIR}/${file}" /quiet /qn /norestart &>/dev/null || echo "cannot install ${file}"
	    "${WINESERVER}" -w
	    ;;
	
	"vcredist_x64_2013.exe" | "vcredist_x86_2013.exe")
	    "${WINE}" "${QUICKINSTALLDIR}/${file}" /quiet /qn /norestart &>/dev/null || echo "cannot install ${file}"
	    "${WINESERVER}" -w
	    ;;
	
	"vcredist_x64_2015.exe" | "vcredist_x86_2015.exe")
	    "${WINE}" "${QUICKINSTALLDIR}/${file}" /quiet /qn /norestart &>/dev/null || echo "cannot install ${file}"
	    "${WINESERVER}" -w
	    ;;
	
	"vcredist_x64_2017.exe" | "vcredist_x86_2017.exe")
	    "${WINE}" "${QUICKINSTALLDIR}/${file}" /quiet /qn /norestart &>/dev/null || echo "cannot install ${file}"
	    "${WINESERVER}" -w
	    ;;
	
	"vcredist_x64_2019.exe" | "vcredist_x86_2019.exe")
	    "${WINE}" "${QUICKINSTALLDIR}/${file}" /quiet /qn /norestart &>/dev/null || echo "cannot install ${file}"
	    "${WINESERVER}" -w
	    ;;
	
	"vcredist_x64_2015_2019.exe" | "vcredist_x86_2015_2019.exe")
	    "${WINE}" "${QUICKINSTALLDIR}/${file}" /quiet /qn /norestart &>/dev/null || echo "cannot install ${file}"
	    "${WINESERVER}" -w
	    ;;
	
	"vcredist_x64_2015_2022.exe" | "vcredist_x86_2015_2022.exe")
	    "${WINE}" "${QUICKINSTALLDIR}/${file}" /quiet /qn /norestart &>/dev/null || echo "cannot install ${file}"
	    "${WINESERVER}" -w
	    ;;
	
	"oalinst.exe")
	    "${WINE}" "${QUICKINSTALLDIR}/${file}" /s &>/dev/null || echo "cannot install ${file}"
	    "${WINESERVER}" -w
	    ;;
	
	*)
	    "${WINE}" "${QUICKINSTALLDIR}/${file}" &>/dev/null || echo "cannot install ${file}"
	    "${WINESERVER}" -w
	    ;;
	esac

	mv -f "${QUICKINSTALLDIR}/${file}" "${QUICKINSTALLDIR}/${file}.done"

	endBSOD
}

msi_install() {

	file=$1
	echo "Executing file ${file}"

	# please wait screen
	bgnBSOD "now installing: ${file}"
	    
	"${MSIEXEC}" -i "${QUICKINSTALLDIR}/${file}" /quiet /qn /norestart &>/dev/null || echo "cannot install ${file}"
	"${WINESERVER}" -w

	mv -f "${QUICKINSTALLDIR}/${file}" "${QUICKINSTALLDIR}/${file}.done"

	endBSOD
}

reg_install() {

	file=$1
	echo "Importing registry ${file}" >&2

	"${WINE}" regedit //?/unix"${QUICKINSTALLDIR}/${file}" &>/dev/null || echo "cannot install ${file}"
	"${WINE64}" regedit //?/unix"${QUICKINSTALLDIR}/${file}" &>/dev/null || echo "cannot install ${file}"

	mv -f "${QUICKINSTALLDIR}/${file}" "${QUICKINSTALLDIR}/${file}.done"
}

fonts_install() {

	file=$1
	echo "Installing fonts ${file}" >&2

	cp -a "${QUICKINSTALLDIR}/${file}" "${WINEPOINT}/drive_c/windows/Fonts" || echo "cannot install ${file}"
	mv -f "${QUICKINSTALLDIR}/${file}" "${QUICKINSTALLDIR}/${file}.done"
}

dxvk_install() {
    export WINEDLLOVERRIDES="winemenubuilder.exe="

    # install dxvk only on system where it is available (aka, not x86)
    [[ -e "/usr/wine/dxvk" ]] || return 0

    if [[ "${DXVK_HUD}" = 1 ]]; then
	    export DXVK_HUD=1
    fi

    if [[ "${DXVK}" = 1 ]]
    then
		mkdir -p "${WINEPREFIX}/drive_c/windows/system32" "${WINEPREFIX}/drive_c/windows/syswow64" || return 1
		if test -e "/userdata/system/wine/dxvk"
		then
		    echo "Creating links on /userdata, Linux File System required !!!" >&2
		    ln -sf "/userdata/system/wine/dxvk/x64/"{d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll,nvapi64.dll} "${WINEPREFIX}/drive_c/windows/system32" || return 1
	        ln -sf "/userdata/system/wine/dxvk/x32/"{d3d8.dll,d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll,nvapi.dll} "${WINEPREFIX}/drive_c/windows/syswow64" || return 1
		else
		    echo "Creating links on /userdata, Linux File System required !!!" >&2
		    ln -sf "/usr/wine/dxvk/x64/"{d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll,nvapi64.dll} "${WINEPREFIX}/drive_c/windows/system32" || return 1
	        ln -sf "/usr/wine/dxvk/x32/"{d3d8.dll,d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll,nvapi.dll} "${WINEPREFIX}/drive_c/windows/syswow64" || return 1
		fi
    else
	    echo "Creating links on /userdata, Linux File System required !!!" >&2
	    ln -sf "/usr/wine/${WINE_VERSION}/lib/wine/x86_64-windows/"{d3d8.dll,d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll}   "${WINEPREFIX}/drive_c/windows/system32" || return 1
        ln -sf "/usr/wine/${WINE_VERSION}/lib/wine/i386-windows/"{d3d8.dll,d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll} "${WINEPREFIX}/drive_c/windows/syswow64" || return 1
    fi

    if [[ "${DXVK}" = 1 ]]; then
        export DXVK_ASYNC=1
        export DXVK_CONFIG_FILE="/userdata/system/wine/dxvk/dxvk.conf"
        export WINEDLLOVERRIDES="${WINEDLLOVERRIDES};dxgi,d3d8,d3d9,d3d10core,d3d11,d3d12,d3d12core=n"
    else
        export DXVK_ASYNC=0
        export WINEDLLOVERRIDES="${WINEDLLOVERRIDES};dxgi,d3d8,d3d9,d3d10core,d3d11,d3d12,d3d12core=b"
    fi

    if [[ "${NVAPI}" = 1 ]]; then
        export DXVK_ENABLE_NVAPI=1
        export WINEDLLOVERRIDES="${WINEDLLOVERRIDES};nvapi,nvapi64=n"
    else
        export DXVK_ENABLE_NVAPI=0
        export WINEDLLOVERRIDES="${WINEDLLOVERRIDES};nvapi64,nvapi="
    fi

    return 0
}

install_winetricks() {

    if [[ -e "${WINETRICKS}" ]]; then
        echo "Winetricks is already installed"
	else
        echo "Winetricks is downloading"
        wget -O "${WINETRICKS}" "https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks" &>/dev/null
        chmod +x "${WINETRICKS}"
        echo "Winetricks is now installed"
	fi
}

trick_wine() {

    TRICK=$1
	echo "** Do trick ${TRICK} to "${WINEPREFIX}" **"

	# please wait screen
	bgnBSOD "now doing trick: ${TRICK}"

    DISPLAY=:0.0 "${WINETRICKS}" "${TRICK}"

	endBSOD
}

tricks_install() {

	TRICKSFILE="${QUICKINSTALLDIR}/$1"
	TRICKSLOG="${QUICKINSTALLDIR}/$1.done"

	install_winetricks
    echo "tricks file: ${TRICKSFILE}" >&2
    echo "tricks log: ${TRICKSLOG}" >&2
	mount_root z "1"
    while read line; do
        line=`echo "${line}" | xargs`
        echo "bgn trick: $line" >&2
		trick_wine "${line}"
        echo "end trick: $line" >&2
        echo "${line}" >> "${TRICKSLOG}"
	unmount_root
    done < "${TRICKSFILE}"
    rm "${TRICKSFILE}"
}

quick_install() {

	mf_install || return 1
	dxvk_install || return 1

	# old reg_install
    if [[ -e "/var/run/rawinput.reg" ]]; then
        "${WINE}" regedit //?/unix/var/run/rawinput.reg &>/dev/null || return 1
        "${WINE64}" regedit //?/unix/var/run/rawinput.reg &>/dev/null || return 1
        rm /var/run/rawinput.reg
    fi

	if [ -d "${QUICKINSTALLDIR}" ]; then

		# for file in "${QUICKINSTALLDIR}/" is not work, why? 
		ls -1 "${QUICKINSTALLDIR}/" | while read file
		do
			if [[ "${file}" =~ \.exe$ ]]; then
				$(redist_install "${file}")
			elif [[ "${file}" =~ \.msi$ ]]; then
				$(msi_install "${file}")
			elif [[ "${file}" =~ \.reg$ ]]; then
				$(reg_install "${file}")
			elif [[ "${file}" =~ \.ttc$ ]]; then
				$(fonts_install "${file}")
			elif [[ "${file}" =~ \.ttf$ ]]; then
				$(fonts_install "${file}")
			elif [[ "${file}" =~ ^tricks\.txt$ ]]; then
				$(tricks_install "${file}")
			fi
        done
	fi

	return 0
}

sandboxing_prefix() {

    if [[ -d "${WINEPOINT}/drive_c/users/steamuser" ]]; then
        USERNAME=steamuser
    fi

    if [[ -d "${WINEPOINT}/drive_c/users/root" ]]; then
        USERNAME=root
    fi

    echo "Remove Symblink"
    # replace some links by folders. 
    # don't create all folders in case links doesn't exist to not create both Music and My Music at the same time (old wine uses My Music, new wine uses Musics)
    for DIR in "Downloads" "Documents" "My Documents" "Music" "My Music" "Pictures" "My Pictures" "Videos" "My Videos" "Templates"
    do
        if [[ -L "${WINEPOINT}/drive_c/users/${USERNAME}/${DIR}" ]]; then
            unlink "${WINEPOINT}/drive_c/users/${USERNAME}/${DIR}" || return 1
            mkdir -p "${WINEPOINT}/drive_c/users/${USERNAME}/${DIR}" || return 1
        fi
    done

    return 0
}

play_wine() {


	mount_iso d "${GAMEDIR}/disc01.iso"
	mount_root z "${BATOCERA_WINE_USE_ROOTDRIVE}"

    if [[ -n "${WINE_LANG}" ]]; then
        (cd "${WINEPOINT}/${WINE_DIR}" && LC_ALL=${WINE_LANG} eval "${WINE} ${VDESKTOP} ${WINE_CMD}")
    else
        (cd "${WINEPOINT}/${WINE_DIR}" && eval "${WINE} ${VDESKTOP} ${WINE_CMD}")
    fi
    waitWineServer
	unmount_root
	unmount_iso
}

play_pc() {

    sandboxing_prefix || return 1

	mount_iso d "${GAMEDIR}/disc01.iso"
	mount_root z "${BATOCERA_WINE_USE_ROOTDRIVE}"
	mount_game y "${MOUNTDIR}"

    if [[ -n "${WINE_LANG}" ]]; then
        (cd "${GAMENAME}/${WINE_DIR}" && LC_ALL=${WINE_LANG} eval "${WINE} ${VDESKTOP} ${WINE_CMD}")
    else
        (cd "${GAMENAME}/${WINE_DIR}" && eval "${WINE} ${VDESKTOP} ${WINE_CMD}")
    fi
    waitWineServer
	unmount_game
	unmount_root
	unmount_iso
}

#play_iso() {
#    # TODO
#}

play_exe() {

    if [ "${BATOCERA_WINE_MAINTENANCE}" = 1 ]; then
        GAMEEXE=explorer
    else
        GAMEEXE=$(basename "${GAMENAME}")
    fi

    sandboxing_prefix || return 1

	mount_iso d "${GAMEDIR}/disc01.iso"
	mount_root z "${BATOCERA_WINE_USE_ROOTDRIVE}"
	mount_game y "${MOUNTDIR}"

    (cd "${GAMEDIR}" && "${WINE}" "${GAMEEXE}")
    waitWineServer
	unmount_game
	unmount_root
	unmount_iso
}

play_winetgz() {

	mount_iso d "${GAMEDIR}/disc01.iso"
	mount_root z "${BATOCERA_WINE_USE_ROOTDRIVE}"
	mount_game y "${WINEPOINT}/drive_y"

    if [[ -n "${WINE_LANG}" ]]; then
        (cd "${WINEPOINT}/${WINE_DIR}" && LC_ALL=${WINE_LANG} eval "${WINE} ${VDESKTOP} ${WINE_CMD}")
    else
        (cd "${WINEPOINT}/${WINE_DIR}" && eval "${WINE} ${VDESKTOP} ${WINE_CMD}")
    fi
    waitWineServer
	unmount_game
	unmount_root
	unmount_iso
}

play_squashfs() {

	mount_iso d "${GAMEDIR}/disc01.iso"
	mount_root z "${BATOCERA_WINE_USE_ROOTDRIVE}"
	mount_game y "${GAMEDIR}/drive_y"

    if [[ -n "${WINE_LANG}" ]]; then
        (cd "${WINEPOINT}/${WINE_DIR}" && LC_ALL=${WINE_LANG} eval "${WINE} ${VDESKTOP} ${WINE_CMD}")
    else
        (cd "${WINEPOINT}/${WINE_DIR}" && eval "${WINE} ${VDESKTOP} ${WINE_CMD}")
    fi

    waitWineServer
	unmount_game
	unmount_root
	unmount_iso
}

init_cmd() {

    (
	echo "#DIR=drive_c/Program Files/myprogram"
	echo "#CMD=start.exe"
    ) > "${WINEPOINT}/autorun.cmd"
}

basename_no_dup() {

    CANDIDATE=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}" | sed -e s+"\.exe$"++)".wine"
    i=0
    while [ -d "${CANDIDATE}" ]; do
        i=$((i+1))
        BASEGAMENAME=$(basename "${GAMENAME}")"_${i}"
        # Keep the extension, easier to troubleshoot when you have multiple setup.exe
        CANDIDATE=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}")".wine"
    done
    echo "${BASEGAMENAME}"
}

install_exe() {

    BASEGAMENAME=$(basename_no_dup "${GAMENAME}")
    INSTALLERFILE="${BASEGAMENAME}"

	mount_root z "1"

    (cd "${GAMEDIR}" && "${WINE}" "${INSTALLERFILE}")
    waitWineServer
    init_cmd

	unmount_root
}

install_msi() {

    BASEGAMENAME=$(basename_no_dup "${GAMENAME}")
    INSTALLERFILE="${BASEGAMENAME}"

	mount_root z "1"

    (cd "${GAMEDIR}" && "${MSIEXEC}" /i "${INSTALLERFILE}")
    waitWineServer
    init_cmd

	unmount_root
}

install_iso() {

    BASEGAMENAME=$(basename_no_dup "${GAMENAME}")
    INSTALLERISO="${GAMENAME}"

	mount_iso d "${INSTALLERISO}"
	mount_root z "1"

    if mkdir -p "${WINEPOINT}/dosdevices" && rm -f "${WINEPOINT}/dosdevices/d:" && ln -sf "${GAMEISOMOUNT}" "${WINEPOINT}/dosdevices/d:"; then
	    "${WINE}" explorer "d:"
	    rm -f "${WINEPOINT}/dosdevices/d:"
    fi

	if test -n "${GAMEISODRIVE}"
	then
		WINEPREFIX=${WINEPOINT} "${WINE}" explorer "d:"
		waitWineServer
		init_cmd
	fi

	unmount_root
 	unmount_iso
}

retarget4archive() {

	FILE=$1
	CMDTMP="${FILE}.tmp"
	DIRTMP=$(mktemp)
	echo -n > "${CMDTMP}"
	cat "${FILE}" | dos2unix | while read line
	do
		if [[ ${line} == "DIR=" ]]; then
			cat /dev/null
		elif [[ ${line} =~ ^DIR=(.+)$ ]]; then
			MATCHED=${BASH_REMATCH[1]}
			echo -n "${MATCHED}" > "${DIRTMP}"
			echo "DIR=drive_y/${MATCHED}" >> "${CMDTMP}"
		else
			echo "${line}" >> "${CMDTMP}"
		fi
	done
	FINAL=$(cat "${DIRTMP}")
	rm "${DIRTMP}"
	if [ "${FINAL}" == "" ]; then
		echo "DIR=drive_y" >> "${CMDTMP}"
	fi
	rm "${FILE}"
	mv "${CMDTMP}" "${FILE}"
}

build4archive() {

	cp -ar "${MOUNTDIR}" "${WINEPOINT}/drive_y"

	if [ -d "${WINEPOINT}/drive_y/boot" ]; then
		rm -rf "${WINEPOINT}/boot"
		mv "${WINEPOINT}/drive_y/boot" "${WINEPOINT}/boot"

		# for file in "${WINEPOINT}/boot/*.cmd" is not work, why? 
		ls -1 "${WINEPOINT}/boot/" | while read file
		do
			if [[ "${file}" =~ \.cmd$ ]]; then
				$(retarget4archive "${WINEPOINT}/boot/${file}")
			fi
        done
	fi
	if [ -f "${WINEPOINT}/drive_y/padto.keys" ]; then
		mv "${WINEPOINT}/drive_y/padto.keys" "${WINEPOINT}/"
	fi
	if [ -f "${WINEPOINT}/drive_y/autorun.cmd" ]; then
		mv "${WINEPOINT}/drive_y/autorun.cmd" "${WINEPOINT}/"
		$(retarget4archive "${WINEPOINT}/autorun.cmd")
	else
		GAMEEXE=$(basename "${GAMENAME}")
	    (
			echo "DIR=drive_y"
			echo "CMD=\"${GAMEEXE}\""
    	) > "${WINEPOINT}/autorun.cmd"
	fi
}

wine2squashfs() {

	NEWGAMENAME=$(gameunext "${BASEGAMENAME}")
	SQUASHFSFILE=$(echo "${G_ROMS_DIR}/${NEWGAMENAME}.wsquashfs" | sed -e s+"\.wine\.squashfs$"+".wsquashfs"+)
	KEYSSAVETO="/userdata/saves/windows/${NEWGAMENAME}"

	mkdir -p "${KEYSSAVETO}" || return 1

	# please wait screen
	bgnBSOD "now packing: ${WINEPOINT} => ${SQUASHFSFILE}"

	# export padto.keys 
	if [ -d "${GAMENAME}" ]; then
		# target game is directory 
		if [ -f "${GAMENAME}/padto.keys" ]; then
			cp -a "${GAMENAME}/padto.keys" "${KEYSSAVETO}/padto.keys"
		fi

		ls -1 "${MOUNTDIR}/boot/" | while read file
		do
			if [[ "${file}" =~ \.keys$ ]]; then
				cp "${MOUNTDIR}/boot/${file}" "${KEYSSAVETO}/${file}"
			fi
	    done
	else
		# target game is file 
		if [ -f "${GAMENAME}.keys" ]; then
			cp -a "${GAMENAME}.keys" "${KEYSSAVETO}/padto.keys"
		fi

		ls -1 "${MOUNTDIR}/" | while read file
		do
			if [[ "${file}" =~ ^${BASEGAMENAME}\.(.+)\.keys$ ]]; then
				echo "P2K variant: ${BASH_REMATCH[1]}"
				cp "${MOUNTDIR}/${file}" "${KEYSSAVETO}/${BASH_REMATCH[1]}.keys"
			fi
	    done
	fi

	if [ "${MOUNTDIR}" != "" ]; then
		build4archive
	fi
    
    mksquashfs "${WINEPOINT}" "${SQUASHFSFILE}" -comp zstd || return 1

	if [ "${MOUNTDIR}" != "" ]; then
		rm -rf "${WINEPOINT}/drive_y"
	fi

    return 0
}

wine2winetgz() {

	NEWGAMENAME=$(gameunext "${BASEGAMENAME}")
	WINETGZFILE="${G_ROMS_DIR}/${NEWGAMENAME}.wtgz"
	KEYSSAVETO="/userdata/saves/windows/${NEWGAMENAME}"

	mkdir -p "${KEYSSAVETO}" || return 1

	# please wait screen
	bgnBSOD "now packing: ${WINEPOINT} => ${WINETGZFILE}"

	# export padto.keys 
	if [ -d "${GAMENAME}" ]; then
		# target game is directory 
		if [ -f "${GAMENAME}/padto.keys" ]; then
			cp -a "${GAMENAME}.keys" "${KEYSSAVETO}/padto.keys"
		fi

		ls -1 "${MOUNTDIR}/boot/" | while read file
		do
			if [[ "${file}" =~ \.keys$ ]]; then
				cp "${MOUNTDIR}/boot/${file}" "${KEYSSAVETO}/${file}"
			fi
	    done
	else
		# target game is file 
		if [ -f "${GAMENAME}.keys" ]; then
			cp -a "${GAMENAME}.keys" "${KEYSSAVETO}/padto.keys"
		fi

		ls -1 "${MOUNTDIR}/" | while read file
		do
			if [[ "${file}" =~ ^${BASEGAMENAME}\.(.+)\.keys$ ]]; then
				echo "P2K variant: ${BASH_REMATCH[1]}"
				cp "${MOUNTDIR}/${file}" "${KEYSSAVETO}/${BASH_REMATCH[1]}.keys"
			fi
	    done
	fi

	if [ "${MOUNTDIR}" != "" ]; then
		build4archive
	fi

    (cd "${WINEPOINT}" && tar cf - * | gzip -c > "${WINETGZFILE}") || return 1

	if [ "${MOUNTDIR}" != "" ]; then
		rm -rf "${WINEPOINT}/drive_y"
	fi

    return 0
}

quick_install || cleanAndExit 1

case "${ACTION}" in
    "play")
	case "${GAMEEXT}" in
	    "wine")
		play_wine || cleanAndExit 1
		;;
	    "pc")
		play_pc || cleanAndExit 1
		;;
	    "exe")
		play_exe || cleanAndExit 1
		;;
#	    "iso")
#		play_iso || cleanAndExit 1
#		;;
	    "wsquashfs")
		play_squashfs || cleanAndExit 1
		;;
	    "wtgz")
		play_winetgz || cleanAndExit 1
		;;
	    *)
		echo "unknown extension ${GAMEEXT}" >&2
		cleanAndExit 1
	esac
	;;
    "install")
	case "${GAMEEXT}" in
	    "exe")
		install_exe || cleanAndExit 1
		;;
	    "msi")
		install_msi || cleanAndExit 1
		;;
	    "iso")
		install_iso || cleanAndExit 1
		;;
	    *)
		echo "unknown extension ${GAMEEXT}" >&2
		cleanAndExit 1
	esac
	;;
    "tricks")
	TRICK=$2
	install_winetricks
	mount_root z "1"
	trick_wine "${TRICK}" || cleanAndExit 1
	;;
    "wine2squashfs")
	if [ "${GAMEEXT}" != "wsquashfs" ]; then
		wine2squashfs || cleanAndExit 1
	fi
	;;
    "wine2winetgz")
	if [ "${GAMEEXT}" != "wtgz" ]; then
		wine2winetgz || cleanAndExit 1
	fi
	;;
    *)
	set +x
	echo "unknown action ${ACTION}" >&2
	usage "${0}"
	cleanAndExit 1
esac

cleanAndExit 0
